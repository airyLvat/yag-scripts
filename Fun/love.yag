{{/* command: love */}}

{{$runIt:=true}}
 
{{if not .ExecData}} 
 
    {{/* Set to 0 for a per user cooldown, set to 1 to make the cooldown global. */}}
    {{$global := 1}}
    {{/* No need to edit: Auto-Naming of the database entry*/}}
    {{$name := "deathmatchtypecommands"}}
    {{/* Length of the cooldown in seconds. */}}
    {{$length := 60}}
    {{/* Whether or not to announce when the command is on cooldown 1 for yes 0 for no */}}
    {{$announce := 1}}
    {{if eq $global 0}}{{$global = .User.ID}}{{else}}{{$global = (toInt64 0)}}{{end}}
    {{if (dbGet $global $name)}}
        {{if eq $announce 1}}
            :warning: All deathmatch type commands including {{.CCID}} are still on cooldown for: {{humanizeDurationSeconds ((dbGet $global $name).ExpiresAt.Sub currentTime)}}.
	    {{deleteResponse 5}}
	{{end}}
	{{$runIt = false}}
    {{else}}{{dbSetExpire $global $name "cooldown" $length}}
    {{end}}
{{end}}

{{if $runIt}}
	{{/*
	This command is a reverse of the deathmatch command from Yggdrasil. Usage: `^love [user1] [user2]`.
 
	Recommended trigger: Command trigger with trigger `love`.
*/}}
{{/* CONFIGURATION VALUES START */}}
{{/* Slice of random channel IDs in your server to decrease execCC lag */}}
{{ $channels := cslice
	1028538456831434793
	1028538491677704244
	1029137217643356200
}}
{{ $emojis := sdict
	"UserA" "<:battleForward:681735565594460181>"
	"UserB" "<:battleBackwards:681735538105253901>"
}}
{{ $yag := userArg 204255221017214977}}
{{$attackPhrases:=(cslice "gives a holy kiss to" "gives chocolate to" "gives flowers to" "sings Christian hymns to" "hugs" "cheers up" "makes hot choco for" "bear hugs" "gives cookies to" "gives ice cream to" "lends an ear for" "lends a shoulder for" "tells a dadjoke for" "prays for" "makes wacky faces for" "reads the Bible for") }}
{{$attackEmotes:=(cslice "<:AngryKiss:695274126134214686>" "üç´" "üíê" "üéµ" "<:BlueHug:912315551362211910>" "<a:Cheerup:811747211225595964>" "‚òï" "<a:HugAnim:691123433374744586>" "<:KindastrangerCookieHeart:712771227848015922>" "üç¶" "üëÇ" "<:lovehearts:701526220969345104>" "üòÇ" "<:Prayer:552365576522039305>  " "ü§™" "<a:HolyBibleAnim:684257390496972855>") }}
{{$attackPhrase:=""}}
{{$attackEmote:=""}}
{{$idxBubibu:=0}}
{{/* CONFIGURATION VALUES END */}}
 
{{ $args := parseArgs 0 "**Syntax:** ^love [user1] [user2]" (carg "userid" "user1") (carg "userid" "user2") }}
{{ $userA := $yag }}
{{ $userB := .User }}
{{ $cc := toInt .CCID }}
 
{{ if $args.IsSet 0 }} {{ $userA = userArg ($args.Get 0) }} {{ end }}
{{ if $args.IsSet 1 }} {{ $userB = userArg ($args.Get 1) }} {{ end }}
{{$placeholder1:=(getMember $userA.ID).Nick}}
{{$placeholder2:=(getMember $userB.ID).Nick}}
{{if not $placeholder1}}{{$placeholder1 = $userA.Username}}{{end}}
{{if not $placeholder2}}{{$placeholder2 = $userB.Username}}{{end}}

{{ $embed := sdict 
	"title" "__‚úùÔ∏è Love Thy Neighbor ‚úùÔ∏è__"
	"description" "*Wholesome moments in 3...*"
	"color" 8864206
	"fields" (cslice
		(sdict "name" $placeholder1 "value" "0/100 HP" "inline" true)
		(sdict "name" $placeholder2 "value" "0/100 HP" "inline" true)
	)
}}
 
{{ with .ExecData }}
	{{ $embed := sdict .Embed }}
	{{ $embed.Set "fields" (cslice.AppendSlice $embed.fields) }}
 
	{{ $msgs := split $embed.description "\n" | cslice.AppendSlice }}
	{{ if .IsFirst }} {{ $msgs = cslice }} {{ end }}
 
	{{ $attacker := index . .Attacker | sdict }}
	{{ $target := index . .Target | sdict }}
	{{ $emoji := $emojis.Get .Target }}
 
	{{ $rand := randInt 100 }}
	{{ $dmg := 0 }}
	{{ if lt $rand 5 }}
		{{ $dmg = randInt 40 50 }}
	{{ else if lt $rand 15 }}
		{{ $dmg = randInt 30 40 }}
	{{ else if lt $rand 45 }}
		{{ $dmg = randInt 20 30 }}
	{{ else }}
		{{ $dmg = randInt 1 20 }}
	{{ end }}
        {{$idxBubibu = randInt 0 (len $attackPhrases)}}
	{{$attackPhrase = (index $attackPhrases $idxBubibu)}}
	{{$attackEmote = (index $attackEmotes $idxBubibu)}}
	{{ $newHp := add $target.HP $dmg }}
	{{ if gt $newHp 100 }} {{ $newHp = 100 }} {{ end }}
	{{ $target.Set "HP" $newHp }}
	{{ $msgs = $msgs.Append (printf "%s **%s** %s **%s**, healing __%d__ HP!"
		$attackEmote
		$attacker.Name
		$attackPhrase
		$target.Name
		$dmg
	) }}
	
	{{$temp1:=.Target}}
	{{$temp2:=.Attacker}}
	{{ $data := sdict . }}
	{{ $data.Set "IsFirst" false }}
	{{ $data.Set "Target" $temp2 }}
	{{ $data.Set "Attacker" $temp1 }}
	{{/* $data.Set .Target $target */}}
 
	{{ if and (eq $target.HP 100) (eq $attacker.HP 100)}}
		{{ $msgs = $msgs.Append (printf "**%s** and **%s** have been recharged with üíû!" $target.Name $attacker.Name) }}
	{{ end }}
	{{ if gt (len $msgs) 3 }}
		{{ $msgs = slice $msgs (sub (len $msgs) 3) (len $msgs) }}
	{{ end }}
	{{ $embed.Set "description" (joinStr "\n" $msgs.StringSlice) }}
		
	{{ $embed.fields.Set (index (sdict "UserA" 0 "UserB" 1) .Target) (sdict
		"name" $target.Name
		"value" (printf "%d/100 HP" $target.HP)
		"inline" true
	) }}
	{{ $data.Set "Embed" $embed }}
 
	{{ if or (lt $target.HP 100) (lt $attacker.HP 100)}}
		{{ execCC $cc (index $channels (randInt (len $channels))) 2 $data }}
	{{ end }}
 
	{{ editMessage .ChannelID .MsgID (cembed $embed) }}
 
{{ else }}
	{{ $initial := sendMessageRetID nil (cembed $embed) }}
	{{ sleep 3 }}
	{{ execCC $cc (index $channels (randInt (len $channels))) 2 (sdict
		"UserA" (sdict "Name" $placeholder1 "HP" 0)
		"UserB" (sdict "Name" $placeholder2 "HP" 0)
		"Embed" $embed
		"Target" "UserA"
		"Attacker" "UserB"
		"MsgID" $initial
		"IsFirst" true
		"ChannelID" .Channel.ID
	) }}
{{ end }}
{{end}}